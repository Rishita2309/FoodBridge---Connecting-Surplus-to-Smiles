package com.project.foodbridge.services;

import com.project.foodbridge.dto.RegisterDTO;
import com.project.foodbridge.entity.Role;
import com.project.foodbridge.entity.RoleType;
import com.project.foodbridge.entity.User;
import com.project.foodbridge.repository.RoleRepository;
import com.project.foodbridge.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.HashSet;
import java.util.Set;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private RoleRepository roleRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    // Register a new user
    public User registerUser(RegisterDTO registerDTO) {
        // Check if the username or email already exists
        if (userRepository.existsByUsername(registerDTO.getUsername())) {
            throw new RuntimeException("Username already exists.");
        }

        if (userRepository.existsByEmail(registerDTO.getEmail())) {
            throw new RuntimeException("Email already exists.");
        }

        // Create a new user object
        User user = new User();
        user.setUsername(registerDTO.getUsername());
        user.setPassword(passwordEncoder.encode(registerDTO.getPassword())); // Encrypt password
        user.setEmail(registerDTO.getEmail());

        // Assign roles to the user
        Set<Role> roles = new HashSet<>();
        for (String roleName : registerDTO.getRoles()) {
            RoleType roleType = RoleType.valueOf(roleName); // Convert string to RoleType enum
            Role role = roleRepository.findByName(roleType)
                    .orElseThrow(() -> new RuntimeException("Role " + roleType + " not found.")); // Using Optional's orElseThrow
            roles.add(role);
        }
        user.setRoles(roles);

        // Save the user
        return userRepository.save(user);
    }
}
